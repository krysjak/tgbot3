import logging
import asyncio
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN
from data import (
    biography_text,
    facts_list,
    audio_archive,
    quiz_questions,
    memorial_places,
    quotes,
    timeline_events,
    photo_archive,
    operas,
    quest_stages,
    museum_exhibits,
    museum_facts,
    museum_directions,
    museum_events
)

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()


# Define state classes
class QuizStates(StatesGroup):
    waiting_for_answer = State()


class QuestStates(StatesGroup):
    current_stage = State()


# Start command
@router.message(CommandStart())
async def cmd_start(message: Message):
    kb = [
        [KeyboardButton(text="üìñ –ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è"), KeyboardButton(text="üé≠ –¶—ñ–∫–∞–≤—ñ —Ñ–∞–∫—Ç–∏")],
        [KeyboardButton(text="üéß –ê—É–¥—ñ–æ–∞—Ä—Ö—ñ–≤"), KeyboardButton(text="‚ùì –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞")],
        [KeyboardButton(text="üó∫ –ö–∞—Ä—Ç–∞ –ø–∞–º'—è—Ç–Ω–∏—Ö –º—ñ—Å—Ü—å"), KeyboardButton(text="üìù –¶–∏—Ç–∞—Ç–∏")],
        [KeyboardButton(text="üìÖ –•—Ä–æ–Ω–æ–ª–æ–≥—ñ—è –∂–∏—Ç—Ç—è"), KeyboardButton(text="üì∏ –§–æ—Ç–æ–∞—Ä—Ö—ñ–≤")],
        [KeyboardButton(text="üé∂ –û–ø–µ—Ä–∞ –¥–Ω—è")],
        [KeyboardButton(text="üèõ –ë—É–¥–∏–Ω–æ–∫-–º—É–∑–µ–π")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.answer(
        f"–í—ñ—Ç–∞—é! –Ø –±–æ—Ç, –ø—Ä–∏—Å–≤—è—á–µ–Ω–∏–π –∂–∏—Ç—Ç—é —Ç–∞ —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ –≤–∏–¥–∞—Ç–Ω–æ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –æ–ø–µ—Ä–Ω–æ—ó —Å–ø—ñ–≤–∞—á–∫–∏ –°–æ–ª–æ–º—ñ—ó –ö—Ä—É—à–µ–ª—å–Ω–∏—Ü—å–∫–æ—ó.\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª, —è–∫–∏–π –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:",
        reply_markup=keyboard
    )


# Biography handler
@router.message(F.text == "üìñ –ë—ñ–æ–≥—Ä–∞—Ñ—ñ—è")
async def biography_handler(message: Message):
    await message.answer(biography_text)


# Facts handler
@router.message(F.text == "üé≠ –¶—ñ–∫–∞–≤—ñ —Ñ–∞–∫—Ç–∏")
async def facts_handler(message: Message):
    fact = random.choice(facts_list)

    # Create keyboard for "Next fact" button
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ñ–∞–∫—Ç", callback_data="next_fact")]]
    )

    await message.answer(fact, reply_markup=keyboard)


# main.py - updated next_fact_callback handler
    from aiogram.exceptions import TelegramBadRequest

    @router.callback_query(F.data == "next_fact")
    async def next_fact_callback(callback: CallbackQuery):
        fact = random.choice(facts_list)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ñ–∞–∫—Ç", callback_data="next_fact")]]
        )
        try:
            await callback.message.edit_text(fact, reply_markup=keyboard)
        except TelegramBadRequest as exc:
            if "message is not modified" in str(exc):
                await callback.answer("This fact is already displayed.", show_alert=True)
            else:
                raise
        await callback.answer()


# Audio archive handler
@router.message(F.text == "üéß –ê—É–¥—ñ–æ–∞—Ä—Ö—ñ–≤")
async def audio_handler(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=audio["title"], callback_data=f"audio_{i}")]
            for i, audio in enumerate(audio_archive)
        ]
    )

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Å –¥–ª—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è:", reply_markup=keyboard)


# main.py - updated audio_callback handler
from aiogram.types import FSInputFile

@router.callback_query(F.data.startswith("audio_"))
async def audio_callback(callback: CallbackQuery):
    audio_index = int(callback.data.split("_")[1])
    audio = audio_archive[audio_index]
    local_audio_path = audio.get("local_path")

    if local_audio_path:
        await bot.send_audio(
            chat_id=callback.from_user.id,
            audio=FSInputFile(local_audio_path),
            caption=f"Title: {audio['title']}\nDescription: {audio['description']}"
        )
    else:
        await bot.send_audio(
            chat_id=callback.from_user.id,
            audio=audio["file_id"],
            caption=f"Title: {audio['title']}\nDescription: {audio['description']}"
        )
    await callback.answer()

# in main.py

@router.message(F.text == "‚ùì –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞")
async def quiz_handler(message: Message, state: FSMContext):
    question_index = random.randrange(len(quiz_questions))
    question = quiz_questions[question_index]

    # Save question data for checking the answer later
    await state.set_state(QuizStates.waiting_for_answer)
    await state.update_data(
        current_question_index=question_index,
        correct_answer=question["correct_answer"]
    )

    # Create keyboard with answer options
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"quiz_answer_{i}")]
            for i, option in enumerate(question["options"])
        ]
    )

    await message.answer(f"–ü–∏—Ç–∞–Ω–Ω—è: {question['question']}", reply_markup=keyboard)


@router.callback_query(F.data.startswith("quiz_answer_"), QuizStates.waiting_for_answer)
async def quiz_answer_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    correct_answer = data["correct_answer"]
    question_index = data["current_question_index"]
    current_question = quiz_questions[question_index]

    answer_index = int(callback.data.split("_")[2])
    selected_answer = current_question["options"][answer_index]

    if selected_answer == correct_answer:
        await callback.message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü—å!")
    else:
        await callback.message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer}")

    # Reset state
    await state.clear()

    # Offer another question
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–©–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="more_quiz")]]
    )
    await callback.message.answer("–ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É?", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "more_quiz")
async def more_quiz_callback(callback: CallbackQuery, state: FSMContext):
    await quiz_handler(callback.message, state)
    await callback.answer()


# Memorial places handler
@router.message(F.text == "üó∫ –ö–∞—Ä—Ç–∞ –ø–∞–º'—è—Ç–Ω–∏—Ö –º—ñ—Å—Ü—å")
async def places_handler(message: Message):
    text = "–ü–∞–º'—è—Ç–Ω—ñ –º—ñ—Å—Ü—è, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –°–æ–ª–æ–º—ñ—î—é –ö—Ä—É—à–µ–ª—å–Ω–∏—Ü—å–∫–æ—é:\n\n"

    for place in memorial_places:
        text += f"üìç {place['name']}\n"
        text += f"    {place['description']}\n"
        text += f"    –ê–¥—Ä–µ—Å–∞: {place['address']}\n\n"

    await message.answer(text)


# Quotes handler
@router.message(F.text == "üìù –¶–∏—Ç–∞—Ç–∏")
async def quotes_handler(message: Message):
    quote = random.choice(quotes)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∞ —Ü–∏—Ç–∞—Ç–∞", callback_data="next_quote")]]
    )

    await message.answer(f"¬´{quote['text']}¬ª\n\n‚Äî {quote['source']}", reply_markup=keyboard)


@router.callback_query(F.data == "next_quote")
async def next_quote_callback(callback: CallbackQuery):
    quote = random.choice(quotes)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∞ —Ü–∏—Ç–∞—Ç–∞", callback_data="next_quote")]]
    )

    await callback.message.edit_text(f"¬´{quote['text']}¬ª\n\n‚Äî {quote['source']}", reply_markup=keyboard)
    await callback.answer()


# Timeline handler
@router.message(F.text == "üìÖ –•—Ä–æ–Ω–æ–ª–æ–≥—ñ—è –∂–∏—Ç—Ç—è")
async def timeline_handler(message: Message):
    text = "–•—Ä–æ–Ω–æ–ª–æ–≥—ñ—è –∂–∏—Ç—Ç—è –°–æ–ª–æ–º—ñ—ó –ö—Ä—É—à–µ–ª—å–Ω–∏—Ü—å–∫–æ—ó:\n\n"

    for event in timeline_events:
        text += f"{event['date']}: {event['description']}\n\n"

    await message.answer(text)


# Photo archive handler
@router.message(F.text == "üì∏ –§–æ—Ç–æ–∞—Ä—Ö—ñ–≤")
async def photo_handler(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=photo["title"], callback_data=f"photo_{i}")]
            for i, photo in enumerate(photo_archive)
        ]
    )

    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:", reply_markup=keyboard)


# main.py - update photo_callback handler
# main.py - updated photo_callback handler
from aiogram.types import FSInputFile

@router.callback_query(F.data.startswith("photo_"))
async def photo_callback(callback: CallbackQuery):
    photo_index = int(callback.data.split("_")[1])
    photo = photo_archive[photo_index]
    local_photo_path = photo.get("local_path")
    if local_photo_path:
        await bot.send_photo(
            chat_id=callback.from_user.id,
            photo=FSInputFile(local_photo_path),
            caption=f"–ù–∞–∑–≤–∞: {photo['title']}\n–û–ø–∏—Å: {photo['description']}"
        )
    else:
        await callback.message.answer(
            f"–ù–∞–∑–≤–∞: {photo['title']}\n–û–ø–∏—Å: {photo['description']}"
        )
    await callback.answer()

# Opera of the day handler
@router.message(F.text == "üé∂ –û–ø–µ—Ä–∞ –¥–Ω—è")
async def opera_handler(message: Message):
    today = datetime.now().strftime("%Y-%m-%d")
    # Use the date to deterministically select an opera for the day
    day_number = sum(int(c) for c in today.replace("-", ""))
    opera_index = day_number % len(operas)

    opera = operas[opera_index]

    text = f"–û–ø–µ—Ä–∞ –¥–Ω—è: {opera['title']}\n\n"
    text += f"–ö–æ–º–ø–æ–∑–∏—Ç–æ—Ä: {opera['composer']}\n"
    text += f"–†–æ–ª—å –°–æ–ª–æ–º—ñ—ó –ö—Ä—É—à–µ–ª—å–Ω–∏—Ü—å–∫–æ—ó: {opera['role']}\n\n"
    text += f"–Ü—Å—Ç–æ—Ä—ñ—è: {opera['history']}\n\n"
    text += f"–¶—ñ–∫–∞–≤–∏–π —Ñ–∞–∫—Ç: {opera['fact']}"

    await message.answer(text)


# Quest handler
@router.message(F.text == "üïµÔ∏è –ö–≤–µ—Å—Ç ¬´–ü–æ–¥–æ—Ä–æ–∂ –°–æ–ª–æ–º—ñ—ó¬ª")
async def quest_handler(message: Message, state: FSMContext):
    # Start the quest from the first stage
    await state.set_state(QuestStates.current_stage)
    await state.update_data(current_stage=0)

    first_stage = quest_stages[0]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"quest_option_{i}")]
            for i, option in enumerate(first_stage["options"])
        ]
    )

    await message.answer(
        f"–ö–≤–µ—Å—Ç ¬´–ü–æ–¥–æ—Ä–æ–∂ –°–æ–ª–æ–º—ñ—ó¬ª - –ï—Ç–∞–ø 1\n\n{first_stage['description']}",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("quest_option_"), QuestStates.current_stage)
async def quest_option_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_stage = data["current_stage"]

    option_index = int(callback.data.split("_")[2])
    stage = quest_stages[current_stage]

    if option_index == stage["correct_option"]:
        # Correct answer, move to the next stage
        current_stage += 1

        if current_stage < len(quest_stages):
            # Next stage
            await state.update_data(current_stage=current_stage)
            next_stage = quest_stages[current_stage]

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=option, callback_data=f"quest_option_{i}")]
                    for i, option in enumerate(next_stage["options"])
                ]
            )

            await callback.message.answer(
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n–ö–≤–µ—Å—Ç ¬´–ü–æ–¥–æ—Ä–æ–∂ –°–æ–ª–æ–º—ñ—ó¬ª - –ï—Ç–∞–ø {current_stage + 1}\n\n{next_stage['description']}",
                reply_markup=keyboard
            )
        else:
            # Quest completed
            await callback.message.answer(
                "üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç ¬´–ü–æ–¥–æ—Ä–æ–∂ –°–æ–ª–æ–º—ñ—ó¬ª!\n\n"
                "–í–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –∑–Ω–∞—î—Ç–µ –∂–∏—Ç—Ç—è —Ç–∞ —Ç–≤–æ—Ä—á—ñ—Å—Ç—å –≤–∏–¥–∞—Ç–Ω–æ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Å–ø—ñ–≤–∞—á–∫–∏."
            )
            await state.clear()
    else:
        # Wrong answer
        await callback.message.answer(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. {stage['feedback'][option_index]}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )

    await callback.answer()


# Museum section
@router.message(F.text == "üèõ –ë—É–¥–∏–Ω–æ–∫-–º—É–∑–µ–π")
async def museum_handler(message: Message):
    kb = [
        [KeyboardButton(text="üè† –§–∞–∫—Ç–∏ –ø—Ä–æ –±—É–¥–∏–Ω–æ–∫")],
        [KeyboardButton(text="üìç –ú–∞—Ä—à—Ä—É—Ç –¥–æ –º—É–∑–µ—é"), KeyboardButton(text="üé≠ –ê—Ñ—ñ—à–∞ –∑–∞—Ö–æ–¥—ñ–≤")],
        [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    await message.answer(
        "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Ä–æ–∑–¥—ñ–ª—É –ø—Ä–æ –ë—É–¥–∏–Ω–æ–∫-–º—É–∑–µ–π –°–æ–ª–æ–º—ñ—ó –ö—Ä—É—à–µ–ª—å–Ω–∏—Ü—å–∫–æ—ó —É –õ—å–≤–æ–≤—ñ!\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:",
        reply_markup=keyboard
    )





@router.message(F.text == "üè† –§–∞–∫—Ç–∏ –ø—Ä–æ –±—É–¥–∏–Ω–æ–∫")
async def museum_facts_handler(message: Message):
    text = "–Ü—Å—Ç–æ—Ä—ñ—è —Ç–∞ —Ñ–∞–∫—Ç–∏ –ø—Ä–æ –±—É–¥–∏–Ω–æ–∫ –°–æ–ª–æ–º—ñ—ó –ö—Ä—É—à–µ–ª—å–Ω–∏—Ü—å–∫–æ—ó:\n\n"

    for fact in museum_facts:
        text += f"‚Ä¢ {fact}\n\n"

    await message.answer(text)


@router.message(F.text == "üìç –ú–∞—Ä—à—Ä—É—Ç –¥–æ –º—É–∑–µ—é")
async def museum_directions_handler(message: Message):
    text = "–Ø–∫ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –¥–æ –±—É–¥–∏–Ω–∫—É-–º—É–∑–µ—é:\n\n"
    text += f"–ê–¥—Ä–µ—Å–∞: {museum_directions['address']}\n\n"
    text += f"–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏: {museum_directions['hours']}\n\n"
    text += "–ú–∞—Ä—à—Ä—É—Ç –≥—Ä–æ–º–∞–¥—Å—å–∫–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º:\n"

    for route in museum_directions["public_transport"]:
        text += f"‚Ä¢ {route}\n"

    text += f"\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: {museum_directions['phone']}"

    # Here you would send a location
    # await bot.send_location(
    #     message.from_user.id,
    #     latitude=museum_directions["location"]["latitude"],
    #     longitude=museum_directions["location"]["longitude"]
    # )

    await message.answer(text)


@router.message(F.text == "üé≠ –ê—Ñ—ñ—à–∞ –∑–∞—Ö–æ–¥—ñ–≤")
async def museum_events_handler(message: Message):
    if not museum_events:
        await message.answer("–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤ —É –º—É–∑–µ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    text = "–ù–∞–π–±–ª–∏–∂—á—ñ –ø–æ–¥—ñ—ó —É –±—É–¥–∏–Ω–∫—É-–º—É–∑–µ—ó –°–æ–ª–æ–º—ñ—ó –ö—Ä—É—à–µ–ª—å–Ω–∏—Ü—å–∫–æ—ó:\n\n"

    for event in museum_events:
        text += f"{event['date']} - {event['title']}\n"
        text += f"{event['description']}\n\n"

    await message.answer(text)


@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await cmd_start(message)


# Register all handlers
dp.include_router(router)


# Start polling
async def main():
    logging.info("Starting bot")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())